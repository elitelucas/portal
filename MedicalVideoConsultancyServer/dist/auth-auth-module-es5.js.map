{"version":3,"sources":["webpack:///src/app/pages/auth/auth-routing.module.ts","webpack:///src/app/pages/auth/auth.module.ts","webpack:///src/app/pages/auth/sign-in-patient/sign-in-patient.component.ts","webpack:///src/app/pages/auth/sign-in-patient/sign-in-patient.component.html","webpack:///src/app/pages/auth/sign-in-super/sign-in-super.component.ts","webpack:///src/app/pages/auth/sign-in-super/sign-in-super.component.html","webpack:///src/app/pages/auth/sign-in/sign-in.component.ts","webpack:///src/app/pages/auth/sign-in/sign-in.component.html","webpack:///src/app/pages/auth/sign-up/sign-up.component.ts","webpack:///src/app/pages/auth/sign-up/sign-up.component.html","webpack:///src/app/pages/auth/sms-verify/sms-verify.component.ts","webpack:///src/app/pages/auth/sms-verify/sms-verify.component.html"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","SignInPatientComponent","formBuilder","authPatientService","router","providerService","step","submitted","entered","domain","isInvalidDomain","isValidRoom","verifyKey","isDuplicatedEmail","isEmptyPhoneNumber","isDuplicatedPhone","isValidNumber","isDuplicatedDNI","directRoomUrl","identify_patient","no_identify_patient","initData","localStorage","removeItem","roomForm","group","room","required","minLength","length","dni","reason","typeAttetion","f","setValue","joinForm","fullName","email","phoneNumber","acceptTerms","requiredTrue","setItem","valid","console","log","value","joinValidatePatient","subscribe","resultPatient","substring","dniPatient","checkRoomExist","result","patientData","patient","providerData","JSON","stringify","navigateByUrl","error","f1","event","invalid","join","errors","field","reset","controls","selector","templateUrl","styleUrls","SignInSuperComponent","authService","isSubmitted","isLoginFailed","hasNotPermission","authForm","password","maxLength","signIn","res","token","user","role","SignInComponent","route","isApproved","isActive","snapshot","params","url","emailVerify","gotoRegister","SignUpComponent","auth","duplicatedKey","isDuplicatedRoom","isPending","registerForm","confirmPassword","validator","signUp","status","onSubmit","encapsulation","None","SmsVerifyComponent","isVerifyFailed","fakeToken","smsForm","smsCode","smsVerify"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AASA,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,EAMrB;AACED,UAAI,EAAE,mBADR;AAEEC,eAAS,EAAE;AAFb,KANqB,EAWrB;AACED,UAAI,EAAE,iBADR;AAEEC,eAAS,EAAE;AAFb,KAXqB,EAgBrB;AACED,UAAI,EAAE,eADR;AAEEC,eAAS,EAAE;AAFb,KAhBqB,EAqBrB;AACED,UAAI,EAAE,kBADR;AAEEC,eAAS,EAAE;AAFb,KArBqB,EA0BrB;AACED,UAAI,EAAE,SADR;AAEEC,eAAS,EAAE;AAFb,KA1BqB,EA+BrB;AACED,UAAI,EAAE,iBADR;AAEEC,eAAS,EAAE;AAFb,KA/BqB,CAAvB;;QA0CaC,iB;;;;;YAAAA;;;;yBAAAA,iB;AAAiB,O;AAAA,gBAHnB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGmB,EAFlB,4DAEkB;;;;0HAAjBG,iB,EAAiB;AAAA;AAAA,kBAFlB,4DAEkB;AAAA,O;AAFN,K;;;;;sEAEXA,iB,EAAiB;cAJ7B,sDAI6B;eAJpB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIoB,Q;;;;;;;;;;;;;;;;;;ACnD9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAyBaC,U;;;;;YAAAA;;;;yBAAAA,U;AAAU,O;AAAA,gBATZ,CACP,4DADO,EAEP,sEAFO,EAGP,0DAHO,EAIP,kEAJO,EAKP,iEALO,EAMP,+DANO,CASY;;;;0HAAVA,U,EAAU;AAAA,uBAVN,0EAUM,EAVW,0EAUX,EAV4B,iGAU5B,EAVoD,2FAUpD,EAV0E,mFAU1E;AAV4F,kBAE/G,4DAF+G,EAG/G,sEAH+G,EAI/G,0DAJ+G,EAK/G,kEAL+G,EAM/G,iEAN+G,EAO/G,+DAP+G;AAU5F,O;AAHF,K;;;;;sEAGRA,U,EAAU;cAXtB,sDAWsB;eAXb;AACRC,sBAAY,EAAE,CAAC,0EAAD,EAAkB,0EAAlB,EAAmC,iGAAnC,EAA2D,2FAA3D,EAAiF,mFAAjF,CADN;AAERH,iBAAO,EAAE,CACP,4DADO,EAEP,sEAFO,EAGP,0DAHO,EAIP,kEAJO,EAKP,iEALO,EAMP,+DANO;AAFD,S;AAWa,Q;;;;;;;;;;;;;;;;;;ACxBvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgBoB;;AAAmC;;AAAe;;;;;;AAClD;;AAAkC;;AAAe;;;;;;AACjD;;AAAoC;;AAAqC;;;;;;AAH3E;;AACE;;AACA;;AACA;;AACF;;;;;;AAHO;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;AAGL;;AAA6B;;AAAsB;;;;;;AAQnD;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;AANF;;AACE;;AAGA;;AAGF;;;;;;AANO;;AAAA;;AAGA;;AAAA;;;;;;AAIP;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;AAUE;;AAAsC;;AAAkB;;;;;;AAD1D;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;AAWL;;AAA4C;;AAAyB;;;;;;AADvE;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;;;;;;;;;AArDb;;AAAgD;AAAA;;AAAA;;AAAA;AAAA;;AAC9C;;AACE;;AACE;;AAAO;;AAAG;;AACV;;AAEA;;AAKA;;AACE;;AACF;;AACF;;AACA;;AACE;;AAAO;;AAAsB;;AAC7B;;AAEA;;AAQA;;AAGA;;AAGF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAM;;AACb;;AAEE;;AAAA;;AACF;;AAGF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAa;;AACpB;;AACE;;AAA+E;;AAAW;;AAC1F;;AAA+E;;AAAS;;AAF1F;;AAGA;;AAGF;;AACF;;AAEA;;AACE;;AAA2F;;AAC3F;;AACF;;AACF;;;;;;AA9DyB;;AAKjB;;AAAA;;AACG;;AAAA;;AAME;;AAAA;;AAML;;AAAA;;AACG;;AAAA;;AAQA;;AAAA;;AAGA;;AAAA;;AASH;;AAAA;;AAEG;;AAAA;;AAWA;;AAAA;;;;;;AAqBH;;AAAoC;;AAAe;;;;;;AACnD;;AAAmC;;AAAe;;;;;;AAClD;;AAAqC;;AAAqC;;;;;;AAH5E;;AACE;;AACA;;AACA;;AACF;;;;;;AAHO;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;AAGL;;AAA6B;;AAAsB;;;;;;AAQnD;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;AANF;;AACE;;AAGA;;AAGF;;;;;;AANO;;AAAA;;AAGA;;AAAA;;;;;;AAIP;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;AA6BA;;AAAoC;;AAAe;;;;;;AADrD;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;;;AA7DX;;AAAgD;AAAA;;AAAA;;AAAA;AAAA;;AAC9C;;AACE;;AACE;;AAAO;;AAAG;;AACV;;AAEA;;AAKA;;AACE;;AACF;;AACF;;AACA;;AACE;;AAAO;;AAAsB;;AAC7B;;AAEA;;AAQA;;AAGA;;AAIF;;AACA;;AACE;;AACE;;AACA;;AAAkB;;AAAW;;AAC/B;;AAEA;;AACE;;AACA;;AAAoB;;AAAS;;AAC/B;;AACF;;AACA;;AACE;;AAEF;;AACF;;AAEA;;AACE;;AACF;;AACA;;AACE;;AACE;;AAEF;;AACA;;AAGA;;AACE;;AAEF;;AACF;;AACA;;AACE;;AACE;;AAEF;;AACA;;AACE;;AAEF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACF;;AAGF;;;;;;AArFwB;;AAKhB;;AAAA;;AACG;;AAAA;;AAME;;AAAA;;AAML;;AAAA;;AACG;;AAAA;;AAQA;;AAAA;;AAGA;;AAAA;;AA4BH;;AAAA;;AAEC;;AAAA;;AAKD;;AAAA;;AAMA;;AAAA;;AAIA;;AAAA;;;;;;AArJhB;;AAEE;;AACE;;AACE;;AACE;;AACF;;AACA;;AACE;;AAkEA;;AAuFF;;AACF;;AACF;;AACF;;;;;;AA5Jc;;AAAA;;AAkEA;;AAAA;;;;;;AA0GE;;AAAyC;;AAAqB;;;;;;AADhE;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;AAQL;;AAAoC;;AAAe;;;;;;AADrD;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;AAGL;;AAA6B;;AAAsB;;;;;;AAWnD;;AAAsC;;AAAyB;;;;;;AAC/D;;AAAmC;;AAAwB;;;;;;AAF7D;;AACE;;AACA;;AACF;;;;;;AAFO;;AAAA;;AACA;;AAAA;;;;;;AAEP;;AAAgE;;AAAuB;;;;;;AAOvF;;AAAiE;;AAAwB;;;;;;AACzF;;AAAgE;;AAA8B;;;;;;AAC9F;;AAA6D;;AAAwB;;;;;;AAYrF;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;AANF;;AACE;;AAGA;;AAGF;;;;;;AANO;;AAAA;;AAGA;;AAAA;;;;;;AAIP;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;AAUI;;AAAuC;;AAAkB;;;;;;AAD3D;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;AAWL;;AAA6C;;AAAyB;;;;;;AADxE;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;AAST;;AAAyE;;AACzE;;;;;;;;AAvGZ;;AACE;;AACE;;AACE;;AACE;;AACF;;AACA;;AACE;;AAA6B;AAAA;;AAAA;;AAAA;AAAA;;AAC3B;;AACE;;AACE;;AAAO;;AAAS;;AAChB;;AAEA;;AAGF;;AACA;;AACE;;AAAO;;AAAG;;AACV;;AAEA;;AAGA;;AACE;;AACF;;AACF;;AACF;;AAEA;;AACE;;AACE;;AAAO;;AAAK;;AACZ;;AAEA;;AAIA;;AACF;;AACA;;AACE;;AAA0B;;AAAY;;AACtC;;AACmE;AAAA;;AAAA;;AAAA;AAAA,WAA6B,cAA7B,EAA6B;AAAA;;AAAA;;AAAA;AAAA,SAA7B;;AADnE;;AAGA;;AACA;;AACA;;AACF;;AACF;;AAKA;;AACE;;AAAO;;AAAsB;;AAC7B;;AAEA;;AAQA;;AAGA;;AAGF;;AAEA;;AACE;;AACE;;AAAO;;AAAM;;AACb;;AAEE;;AAAA;;AACF;;AAGF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAa;;AACpB;;AACE;;AAA+E;;AAAW;;AAC1F;;AAA+E;;AAAS;;AAF1F;;AAGA;;AAGF;;AACF;;AAEA;;AACE;;AAEA;;AAAkD;;AAAyB;;AAC3E;;AAEF;;AAEA;;AACE;;AAAqC;;AAAI;;AACzC;;AAAoD;AAAA;;AAAA;;AAAA;AAAA;;AAAoB;;AAAM;;AAC9E;;AAAgC;;AAA0C;;AAAO;;AACjF;;AAA8D;;AACnB;;AAC5B;;AACjB;;AACF;;AACF;;AACF;;AACF;;AACF;;;;;;AA/Gc;;AAAA;;AAKE;;AAAA;;AACG;;AAAA;;AAOH;;AAAA;;AACG;;AAAA;;AAIE;;AAAA;;AASL;;AAAA;;AACG;;AAAA;;AAIiC;;AAAA;;AAKpC;;AAAA;;AAEoC;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAUtC;;AAAA;;AACG;;AAAA;;AAQA;;AAAA;;AAGA;;AAAA;;AASD;;AAAA;;AAEG;;AAAA;;AAWA;;AAAA;;AAQL;;AAAA;;AAEG;;AAAA;;AAQyB;;AAAA;;;;QDxQjCI,sB;;;AA2BX,sCAAoBC,WAApB,EACUC,kBADV,EAEUC,MAFV,EAGUC,eAHV,EAG4C;AAAA;;AAHxB,aAAAH,WAAA,GAAAA,WAAA;AACV,aAAAC,kBAAA,GAAAA,kBAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AACA,aAAAC,eAAA,GAAAA,eAAA;AA7BV,aAAAC,IAAA,GAAO,CAAP;AAIA,aAAAC,SAAA,GAAY,KAAZ;AACA,aAAAC,OAAA,GAAQ,KAAR;AACA,aAAAC,MAAA,GAAS,sEAAYA,MAArB;AAEA,aAAAC,eAAA,GAA2B,KAA3B;AACA,aAAAC,WAAA,GAAuB,IAAvB;AACA,aAAAC,SAAA,GAAU,KAAV;AAKA,aAAAC,iBAAA,GAA6B,KAA7B;AACA,aAAAC,kBAAA,GAA8B,KAA9B;AACA,aAAAC,iBAAA,GAA6B,KAA7B;AACA,aAAAC,aAAA,GAAyB,IAAzB;AACA,aAAAC,eAAA,GAA2B,KAA3B;AACA,aAAAC,aAAA,GAAwB,EAAxB;AAGA,aAAAC,gBAAA,GAAmB,IAAnB;AACA,aAAAC,mBAAA,GAAsB,KAAtB;AAK+C;;;;mCAEvC;AACN,eAAKC,QAAL;AACD;;;mCAEU;AACTC,sBAAY,CAACC,UAAb,CAAwB,eAAxB;AACAD,sBAAY,CAACC,UAAb,CAAwB,cAAxB;AACAD,sBAAY,CAACC,UAAb,CAAwB,SAAxB;AACAD,sBAAY,CAACC,UAAb,CAAwB,UAAxB;AACAD,sBAAY,CAACC,UAAb,CAAwB,aAAxB;AACA,eAAKC,QAAL,GAAgB,KAAKtB,WAAL,CAAiBuB,KAAjB,CAAuB;AACrCC,gBAAI,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,KAAKnB,MAAL,CAAYoB,MAAZ,GAAqB,CAA1C,CAAtB,CAAL,CAD+B;AAErCC,eAAG,EAAE,CAAC,EAAD,EAAK,0DAAWH,QAAhB,CAFgC;AAGrCI,kBAAM,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWJ,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAL,CAH6B;AAIrCI,wBAAY,EAAE,CAAC,EAAD,EAAK,0DAAWL,QAAhB;AAJuB,WAAvB,CAAhB;AAOA,eAAKM,CAAL,CAAOH,GAAP,CAAWI,QAAX,CAAoB,UAApB;AACA,eAAKD,CAAL,CAAOP,IAAP,CAAYQ,QAAZ,CAAqB,KAAKzB,MAAL,GAAc,WAAnC,EAdS,CAeT;;AAEA,eAAK0B,QAAL,GAAgB,KAAKjC,WAAL,CAAiBuB,KAAjB,CAAuB;AACrCW,oBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWT,QAAhB,CAD2B;AAErCG,eAAG,EAAE,CAAC,EAAD,EAAK,0DAAWH,QAAhB,CAFgC;AAGrCU,iBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWV,QAAZ,EAAsB,0DAAWU,KAAjC,CAAL,CAH8B;AAIrCC,uBAAW,EAAE,CAAC,EAAD,EAAK,0DAAWX,QAAhB,CAJwB;AAKrCY,uBAAW,EAAE,CAAC,KAAD,EAAQ,0DAAWC,YAAnB,CALwB;AAMrC;AACAd,gBAAI,EAAE,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CAP+B;AAQrCI,kBAAM,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWJ,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,CAAL,CAR6B;AASrCI,wBAAY,EAAE,CAAC,EAAD,EAAK,0DAAWL,QAAhB;AATuB,WAAvB,CAAhB;AAWD;;;oCAKW;AAAA;;AACVL,sBAAY,CAACmB,OAAb,CAAqB,cAArB,EAAqC,KAAKrB,mBAA1C;;AACA,cAAI,KAAKI,QAAL,CAAckB,KAAlB,EAAyB;AACvBC,mBAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,mBAAO,CAACC,GAAR,CAAY,KAAKpB,QAAL,CAAcqB,KAA1B;AACA,iBAAK1C,kBAAL,CAAwB2C,mBAAxB,CAA4C,KAAKtB,QAAL,CAAcqB,KAA1D,EAAiEE,SAAjE,CAA2E,UAACC,aAAD,EAAmB;AAC5F,mBAAI,CAACzC,SAAL,GAAiB,IAAjB;;AACA,kBAAMmB,IAAI,GAAG,KAAI,CAACO,CAAL,CAAOP,IAAP,CAAYmB,KAAZ,CAAkBI,SAAlB,CAA4B,KAAI,CAACxC,MAAL,CAAYoB,MAAxC,CAAb;;AACA,kBAAMqB,UAAU,GAAG,KAAI,CAACjB,CAAL,CAAOH,GAAP,CAAWe,KAA9B;;AACA,mBAAI,CAACxC,eAAL,CAAqB8C,cAArB,CAAoCzB,IAApC,EACGqB,SADH,CACa,UAAAK,MAAM,EAAI;AACnB,oBAAIA,MAAJ,EAAY;AACV,uBAAI,CAAC9C,IAAL,GAAY,CAAZ;AACA,uBAAI,CAACC,SAAL,GAAiB,KAAjB;AACA,uBAAI,CAAC8C,WAAL,GAAmBL,aAAa,CAACM,OAAjC;AACA,uBAAI,CAACC,YAAL,GAAoBH,MAApB;AACA,uBAAI,CAAClC,aAAL,GAAqB,MAAM,KAAI,CAACqC,YAAL,CAAkB7B,IAA7C;AACAJ,8BAAY,CAACmB,OAAb,CAAqB,SAArB,EAAgCe,IAAI,CAACC,SAAL,CAAe,KAAI,CAACJ,WAApB,CAAhC;AACA/B,8BAAY,CAACmB,OAAb,CAAqB,UAArB,EAAiCe,IAAI,CAACC,SAAL,CAAe,KAAI,CAACF,YAApB,CAAjC;AACAjC,8BAAY,CAACmB,OAAb,CAAqB,cAArB,EAAqC,KAAI,CAACtB,gBAA1C;;AACA,uBAAI,CAACf,MAAL,CAAYsD,aAAZ,CAA0B,KAAI,CAACxC,aAA/B;AACD,iBAVD,MAWK;AACH,uBAAI,CAACP,WAAL,GAAmB,KAAnB;AACD;AACF,eAhBH;AAiBD,aArBD,EAqBG,UAAAgD,KAAK,EAAI;AACV,mBAAI,CAACrD,IAAL,GAAY,CAAZ;;AACA,mBAAI,CAACsD,EAAL,CAAQlC,IAAR,CAAaQ,QAAb,CAAsB,KAAI,CAACD,CAAL,CAAOP,IAAP,CAAYmB,KAAlC;;AACA,mBAAI,CAACe,EAAL,CAAQ9B,GAAR,CAAYI,QAAZ,CAAqB,KAAI,CAACD,CAAL,CAAOH,GAAP,CAAWe,KAAhC;;AACA,mBAAI,CAACe,EAAL,CAAQ7B,MAAR,CAAeG,QAAf,CAAwB,KAAI,CAACD,CAAL,CAAOF,MAAP,CAAcc,KAAtC;;AACA,mBAAI,CAACe,EAAL,CAAQ5B,YAAR,CAAqBE,QAArB,CAA8B,KAAI,CAACD,CAAL,CAAOD,YAAP,CAAoBa,KAAlD;AACD,aA3BD;AA6BD;AACF;;;iCAEQgB,K,EAAgB;AACvB,eAAK7C,aAAL,GAAqB6C,KAArB;AACD;;;kCAESvB,W,EAAkB;AAC1B,eAAKA,WAAL,GAAmBA,WAAnB;AACA,iBAAO,KAAKA,WAAZ;AACD;;;+BAEM;AAAA;;AACLhB,sBAAY,CAACmB,OAAb,CAAqB,cAArB,EAAqC,KAAKrB,mBAA1C;AACA,eAAKb,SAAL,GAAiB,IAAjB;;AACA,cAAI,KAAK4B,QAAL,CAAc2B,OAAlB,EAA2B;AACzB;AACD;;AACD,eAAK3B,QAAL,CAAcU,KAAd,CAAoBP,WAApB,GAAkC,KAAKA,WAAvC;AACA,eAAKnC,kBAAL,CAAwB4D,IAAxB,CAA6B,KAAK5B,QAAL,CAAcU,KAA3C,EACGE,SADH,CACa,UAAAK,MAAM,EAAI;AACnB,gBAAIA,MAAJ,EAAY;AACV,oBAAI,CAACjD,kBAAL,CAAwB2C,mBAAxB,CAA4CM,MAA5C,EAAoDL,SAApD,CAA8D,UAAAC,aAAa,EAAI;AAC7E,oBAAMtB,IAAI,GAAG,MAAI,CAACkC,EAAL,CAAQlC,IAAR,CAAamB,KAAb,CAAmBI,SAAnB,CAA6B,MAAI,CAACxC,MAAL,CAAYoB,MAAzC,CAAb;;AACA,sBAAI,CAACxB,eAAL,CAAqB8C,cAArB,CAAoCzB,IAApC,EACGqB,SADH,CACa,UAAAK,MAAM,EAAI;AACnB,wBAAI,CAACG,YAAL,GAAoBH,MAApB;AACA,wBAAI,CAAClC,aAAL,GAAqB,MAAM,MAAI,CAACqC,YAAL,CAAkB7B,IAA7C;AACA,wBAAI,CAAC2B,WAAL,GAAmBL,aAAa,CAACM,OAAjC;AACAhC,8BAAY,CAACmB,OAAb,CAAqB,SAArB,EAAgCe,IAAI,CAACC,SAAL,CAAe,MAAI,CAACJ,WAApB,CAAhC;AACA/B,8BAAY,CAACmB,OAAb,CAAqB,UAArB,EAAiCe,IAAI,CAACC,SAAL,CAAe,MAAI,CAACF,YAApB,CAAjC;AACAjC,8BAAY,CAACmB,OAAb,CAAqB,cAArB,EAAqC,MAAI,CAACtB,gBAA1C;;AACA,wBAAI,CAACf,MAAL,CAAYsD,aAAZ,CAA0B,MAAI,CAACxC,aAA/B;;AACA,wBAAI,CAACZ,IAAL,GAAY,CAAZ;AACA,wBAAI,CAACiD,YAAL,GAAoB,IAApB;AACA,wBAAI,CAACrC,aAAL,GAAqB,IAArB;AACD,iBAZH;AAaD,eAfD;AAgBD;AACF,WApBH,EAoBK,UAAAyC,KAAK,EAAI;AACV,gBAAIA,KAAJ,EAAW;AACT,kBAAIA,KAAK,CAACA,KAAV,EAAiBA,KAAK,CAACA,KAAN,CAAYK,MAAZ,CAAmB,CAAnB,EAAsBC,KAAtB,KAAgC,KAAhC,GAAwC,MAAI,CAAChD,eAAL,GAAuB,IAA/D,GAAuE0C,KAAK,CAACA,KAAN,CAAYK,MAAZ,CAAmB,CAAnB,EAAsBC,KAAtB,KAAgC,aAAhC,GAAgD,MAAI,CAAClD,iBAAL,GAAyB,IAAzE,GAAgF,MAAI,CAACF,iBAAL,GAAyB,IAAhL;AAClB;AACF,WAxBH;AAyBD;;;kCAGS;AACR,eAAKN,SAAL,GAAiB,KAAjB;AACA,eAAKM,iBAAL,GAAyB,KAAzB;AACA,eAAKE,iBAAL,GAAyB,KAAzB;AACA,eAAKE,eAAL,GAAuB,KAAvB;AACA,eAAKD,aAAL,GAAqB,IAArB;AACA,eAAKF,kBAAL,GAA0B,KAA1B;AACA,eAAKqB,QAAL,CAAc+B,KAAd;AACD;;;4BA5FO;AAAE,iBAAO,KAAK1C,QAAL,CAAc2C,QAArB;AAAgC;;;4BACjC;AAAE,iBAAO,KAAKhC,QAAL,CAAcgC,QAArB;AAAgC;;;;;;;uBAnEhClE,sB,EAAsB,2H,EAAA,kJ,EAAA,uH,EAAA,2I;AAAA,K;;;YAAtBA,sB;AAAsB,0C;AAAA,c;AAAA,a;AAAA,4kG;AAAA;AAAA;ACdnC;;AACE;;AACE;;AAsKA;;AAuHF;;AACF;;;;AA9RkB;;AAAA;;AAsKA;;AAAA;;;;;;;;;sED1JLA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTmE,kBAAQ,EAAE,qBADD;AAETC,qBAAW,EAAE,kCAFJ;AAGTC,mBAAS,EAAE,CAAC,iCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEdnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKI;;AACE;;AACE;;AAAI;;AAA0C;;AAChD;;AACF;;;;;;AACA;;AACE;;AACE;;AAAI;;AAAyC;;AAC/C;;AACF;;;;;;AAMI;;AAAgD;;AAAiB;;;;;;AACjE;;AAA6C;;AAAuB;;;;;;AAFjE;;AACH;;AACA;;AACF;;;;;;AAFO;;AAAA;;AACA;;AAAA;;;;;;AAIL;;AAAmD;;AAAoB;;;;;;AACvE;;AAAoD;;AAAoC;;;;;;AACxF;;AAAoD;;AAAsC;;;;;;AAHvF;;AACH;;AACA;;AACA;;AACF;;;;;;AAHO;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;;;;;QDhBAC,oB;;;AAMX,oCACUC,WADV,EAC4CpE,MAD5C,EACoEF,WADpE,EAC4F;AAAA;;AAAlF,aAAAsE,WAAA,GAAAA,WAAA;AAAkC,aAAApE,MAAA,GAAAA,MAAA;AAAwB,aAAAF,WAAA,GAAAA,WAAA;AAJpE,aAAAuE,WAAA,GAAgB,KAAhB;AACA,aAAAC,aAAA,GAAyB,KAAzB;AACA,aAAAC,gBAAA,GAA4B,KAA5B;AAGK;;;;mCAEG;AACN,eAAKC,QAAL,GAAkB,KAAK1E,WAAL,CAAiBuB,KAAjB,CAAuB;AACvCY,iBAAK,EAAE,CAAC,EAAD,EAAK,0DAAWV,QAAhB,CADgC;AAEvCkD,oBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWlD,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWkD,SAAX,CAAqB,GAArB,CAA/C,CAAL;AAF6B,WAAvB,CAAlB;AAID;;;iCAIK;AAAA;;AACJ,eAAKL,WAAL,GAAmB,IAAnB;;AACA,cAAG,KAAKG,QAAL,CAAcd,OAAjB,EAAyB;AACvB;AACD;;AACD,eAAKU,WAAL,CAAiBO,MAAjB,CAAwB,KAAKH,QAAL,CAAc/B,KAAtC,EAA6CE,SAA7C,CAAuD,UAACiC,GAAD,EAAa;AAClE,gBAAGA,GAAG,CAACC,KAAP,EAAc;AACZ,kBAAGD,GAAG,CAACE,IAAJ,CAASC,IAAT,KAAkB,YAArB,EAAmC;AACjC,sBAAI,CAAC/E,MAAL,CAAYsD,aAAZ,CAA0B,kBAA1B;AACD,eAFD,MAEO;AACL,sBAAI,CAACiB,gBAAL,GAAwB,IAAxB;;AACA,sBAAI,CAACvE,MAAL,CAAYsD,aAAZ,CAA0B,QAA1B;AACD;AACF;AACF,WATD,EASG,UAAAC,KAAK,EAAI;AACV,kBAAI,CAACe,aAAL,GAAqB,IAArB;;AACA,kBAAI,CAACtE,MAAL,CAAYsD,aAAZ,CAA0B,QAA1B;AACC,WAZH;AAcD;;;4BArBkB;AAAE,iBAAO,KAAKkB,QAAL,CAAcT,QAArB;AAAgC;;;;;;;uBAjB1CI,oB,EAAoB,mI,EAAA,uH,EAAA,2H;AAAA,K;;;YAApBA,oB;AAAoB,wC;AAAA,e;AAAA,c;AAAA,ggB;AAAA;AAAA;ACXjC;;AACE;;AACE;;AACE;;AACF;;AACA;;AAKA;;AAKA;;AACE;;AAAyB;;AAAM;;AAC/B;;AAAqD;AAAA,mBAAY,IAAAQ,MAAA,EAAZ;AAAoB,WAApB;;AAAuB;;AAC1E;;AACF;;AAAK;;AAGE;;AACL;;AACF;;AAAK;;AAIE;;AACL;;AACF;;AACA;;AACF;;AACF;;AACF;;;;AA7BkB;;AAAA;;AAKA;;AAAA;;AAON;;AAAA;;AAAyE;;AAAA;;AAErE;;AAAA;;AAGA;;AAAA;;AAEA;;AAAA;;;;;;;;;sEDbHR,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTH,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEXjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKI;;AACE;;AACE;;AAAI;;AAA0C;;AAChD;;AACF;;;;;;AACA;;AACE;;AACE;;AAAI;;AAAwB;;AAC9B;;AACF;;;;;;AACA;;AACE;;AACE;;AAAI;;AAA4B;;AAClC;;AACF;;;;;;AAMI;;AAAgD;;AAAiB;;;;;;AACjE;;AAA6C;;AAAuB;;;;;;AAFjE;;AACH;;AACA;;AACF;;;;;;AAFO;;AAAA;;AACA;;AAAA;;;;;;AAML;;AAAmD;;AAAoB;;;;;;AACvE;;AAAoD;;AAAsC;;;;;;AAF5F;;AACE;;AACA;;AACF;;;;;;AAFO;;AAAA;;AACA;;AAAA;;;;;;;;;;QDvBAc,e;;;AAMX,+BAAoBZ,WAApB,EAAsDa,KAAtD,EAAqFjF,MAArF,EAA6GF,WAA7G,EAAuI;AAAA;;AAAnH,aAAAsE,WAAA,GAAAA,WAAA;AAAkC,aAAAa,KAAA,GAAAA,KAAA;AAA+B,aAAAjF,MAAA,GAAAA,MAAA;AAAwB,aAAAF,WAAA,GAAAA,WAAA;AAJ7G,aAAAuE,WAAA,GAAgB,KAAhB;AACA,aAAAC,aAAA,GAAyB,KAAzB;AACA,aAAAY,UAAA,GAAsB,IAAtB;AACA,aAAAC,QAAA,GAAoB,IAApB;AAEE,aAAKX,QAAL,GAAkB,KAAK1E,WAAL,CAAiBuB,KAAjB,CAAuB;AACvCY,eAAK,EAAE,CAAC,EAAD,EAAK,0DAAWV,QAAhB,CADgC;AAEvCkD,kBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWlD,QAAZ,EAAsB,0DAAWmD,SAAX,CAAqB,GAArB,CAAtB,CAAL;AAF6B,SAAvB,CAAlB;AAID;;;;mCAEO;AAAA;;AACN;AACA,cAAMG,KAAK,GAAW,KAAKI,KAAL,CAAWG,QAAX,CAAoBC,MAApB,CAA2BC,GAAjD;;AACA,cAAGT,KAAH,EAAU;AACR,iBAAKT,WAAL,CAAiBmB,WAAjB,CAA6BV,KAA7B,EAAoClC,SAApC,CAA8C,UAAAiC,GAAG,EAAG;AAClDrC,qBAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCoC,GAApC;;AACA,oBAAI,CAAC5E,MAAL,CAAYsD,aAAZ,CAA0B,eAA1B;AACD,aAHD;AAID;AACF;;;iCAIK;AAAA;;AACJ,eAAKe,WAAL,GAAmB,IAAnB;;AACA,cAAG,KAAKG,QAAL,CAAcd,OAAjB,EAAyB;AACvB;AACD;;AACA,eAAKU,WAAL,CAAiBO,MAAjB,CAAwB,KAAKH,QAAL,CAAc/B,KAAtC,EAA6CE,SAA7C,CAAwD,UAAAiC,GAAG,EAAI;AAC7DrC,mBAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,mBAAO,CAACC,GAAR,CAAYoC,GAAZ;;AACA,gBAAGA,GAAG,CAACE,IAAJ,CAASC,IAAT,KAAgB,MAAnB,EAA0B;AACzB,oBAAI,CAAC/E,MAAL,CAAYsD,aAAZ,CAA0B,4BAA1B;AACA,aAFD,MAEM,IAAGsB,GAAG,CAACE,IAAJ,CAASC,IAAT,KAAgB,UAAnB,EAA8B;AACnC,oBAAI,CAAC/E,MAAL,CAAYsD,aAAZ,CAA0B,qBAA1B;AACA,aAFK,MAEA,IAAGsB,GAAG,CAACE,IAAJ,CAASC,IAAT,KAAgB,YAAnB,EAAgC;AACrC,oBAAI,CAAC/E,MAAL,CAAYsD,aAAZ,CAA0B,2BAA1B;AACA;AACH,WAVA,EAUE,UAAAC,KAAK,EAAI;AACV,kBAAI,CAACe,aAAL,GAAqB,CAAC,CAACf,KAAvB;AACA,WAZD;AAcF;;;uCAEW;AACV,eAAKvD,MAAL,CAAYsD,aAAZ,CAA0B,wBAA1B;AACD;;;mCAEUsB,G,EAAK;AACd,cAAIA,GAAG,CAACE,IAAJ,CAASC,IAAT,KAAkB,OAAtB,EAA+B;AAC7B,iBAAK/E,MAAL,CAAYsD,aAAZ,CAA0B,kBAA1B;AACD,WAFD,MAEO;AACL,iBAAKtD,MAAL,CAAYsD,aAAZ,CAA0B,4BAA1B;AACD;AACF;;;4BAjCkB;AAAE,iBAAO,KAAKkB,QAAL,CAAcT,QAArB;AAAgC;;;;;;;uBAxB1CiB,e,EAAe,mI,EAAA,+H,EAAA,uH,EAAA,2H;AAAA,K;;;YAAfA,e;AAAe,kC;AAAA,e;AAAA,c;AAAA,gnB;AAAA;AAAA;ACV5B;;AACE;;AACE;;AACE;;AACF;;AACA;;AAKA;;AAKA;;AAKA;;AACE;;AAAyB;;AAAM;;AAC/B;;AAAqD;AAAA,mBAAY,IAAAL,MAAA,EAAZ;AAAoB,WAApB;;AAAuB;;AAC1E;;AACF;;AAAK;;AAIL;;AACE;;AACF;;AACA;;AAIA;;AACE;;AACE;;AAAkE;;AAAM;;AAE1E;;AACA;;AACE;;AAAqD;AAAA,mBAAS,IAAAa,YAAA,EAAT;AAAuB,WAAvB;;AAAyB;;AAAQ;;AAExF;;AACF;;AACA;;AAEF;;AACF;;AACF;;;;AA5CkB;;AAAA;;AAKA;;AAAA;;AAKA;;AAAA;;AAON;;AAAA;;AAAyE;;AAAA;;AAErE;;AAAA;;AAIP;;AAAA;;AAGE;;AAAA;;;;;;;;;sEDrBER,e,EAAe;cAL3B,uDAK2B;eALjB;AACThB,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AET5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACaM;;AACE;;AACE;;AACF;;AACF;;;;;;AASQ;;AAAqC;;AAAyB;;;;;;AAC9D;;AAAkC;;AAAwB;;;;;;AAC1D;;AAAsC;;AAA8C;;;;;;AAHtF;;AACE;;AACA;;AACA;;AACF;;;;;;AAHO;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;AAEP;;AAAgE;;AAAuB;;;;;;AAWrF;;AAAwC;;AAAoB;;;;;;AAD9D;;AACE;;AACF;;;;;;AADO;;AAAA;;;;;;AASL;;AAA+C;;AAA4B;;;;;;AAC3E;;AAAgD;;AAA2B;;;;;;AAF7E;;AACE;;AACA;;AACF;;;;;;AAFO;;AAAA;;AACA;;AAAA;;;;;;;;;;QDtCNuB,e;;;AAab,+BACU3F,WADV,EAEU4F,IAFV,EAGU1F,MAHV,EAGuB;AAAA;;AAFb,aAAAF,WAAA,GAAAA,WAAA;AACA,aAAA4F,IAAA,GAAAA,IAAA;AACA,aAAA1F,MAAA,GAAAA,MAAA;AAbR,aAAAG,SAAA,GAAY,KAAZ;AACF,aAAAwF,aAAA,GAAc,KAAd;AAEE,aAAAC,gBAAA,GAA4B,KAA5B;AACA,aAAAC,SAAA,GAAqB,KAArB;AACA,aAAApF,iBAAA,GAA4B,KAA5B;AACA,aAAAE,iBAAA,GAA6B,KAA7B;AACA,aAAAC,aAAA,GAAyB,IAAzB;AACA,aAAAF,kBAAA,GAA8B,KAA9B;AACA,aAAAwB,WAAA,GAAqB,EAArB;AAKK;;;;mCAEM;AACT,eAAK4D,YAAL,GAAoB,KAAKhG,WAAL,CAAiBuB,KAAjB,CAAuB;AACzCY,iBAAK,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWV,QAAZ,EAAsB,0DAAWU,KAAjC,EAAuC,0DAAWyC,SAAX,CAAqB,GAArB,CAAvC,CAAL,CADkC;AAEzCD,oBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWlD,QAAhB,CAF+B;AAGzCwE,2BAAe,EAAE,CAAC,EAAD,EAAK,0DAAWxE,QAAhB;AAHwB,WAAvB,EAIjB;AACDyE,qBAAS,EAAE,gFAAU,UAAV,EAAsB,iBAAtB;AADV,WAJiB,CAApB;AAOD,S,CAED;;;;mCAGW;AAAA;;AACT,eAAK7F,SAAL,GAAiB,IAAjB,CADS,CAET;;AACA,cAAI,KAAK2F,YAAL,CAAkBpC,OAAtB,EAA+B;AAC7B;AACD;;AAED,eAAKgC,IAAL,CAAUO,MAAV,CAAiB,KAAKH,YAAL,CAAkBrD,KAAnC,EAA0CE,SAA1C,CAAoD,UAAAiC,GAAG,EAAG;AAC1D,gBAAGA,GAAG,KAAG,WAAT,EAAqB;AACnB,oBAAI,CAACe,aAAL,GAAmB,IAAnB;AACD;;AACC,gBAAGf,GAAG,CAACC,KAAP,EAAc;AACZ,oBAAI,CAAC7E,MAAL,CAAYsD,aAAZ,CAA0B,4BAA1B;AACD,aAFD,MAEO,IAAGsB,GAAG,CAACsB,MAAJ,IAAc,KAAjB,EAAwB;AAC7B3D,qBAAO,CAACC,GAAR,CAAY,QAAZ;AACD;AACF,WATD;AAUD;;;iCAGQiB,K,EAAgB;AACvB,eAAK7C,aAAL,GAAqB6C,KAArB;AACD;;;4BAxBO;AAAE,iBAAO,KAAKqC,YAAL,CAAkB/B,QAAzB;AAAoC;;;;;;;uBA9BnC0B,e,EAAe,2H,EAAA,mI,EAAA,uH;AAAA,K;;;YAAfA,e;AAAe,kC;AAAA,e;AAAA,c;AAAA,63B;AAAA;AAAA;ACd5B;;AAEE;;AACE;;AACE;;AAIE;;AACE;;AACF;;AACF;;AACF;;AACA;;AACE;;AAKA;;AAAiC;AAAA,mBAAY,IAAAU,QAAA,EAAZ;AAAsB,WAAtB;;AAE/B;;AACE;;AACE;;AAAO;;AAAK;;AACZ;;AAEA;;AAKA;;AACF;;AAEF;;AAEA;;AACE;;AACE;;AAAO;;AAAQ;;AACf;;AAEA;;AAGF;;AAEA;;AACE;;AAAO;;AAAgB;;AACvB;;AAEA;;AAIF;;AACF;;AAEA;;AACE;;AAAqC;;AAAQ;;AAC/C;;AACF;;AACF;;AACF;;AACF;;;;AAjDoB;;AAAA;;AAKR;;AAAA;;AAMO;;AAAA;;AACF;;AAAA;;AAKiC;;AAAA;;AAS/B;;AAAA;;AACF;;AAAA;;AAQG;;AAAA;;AACH;;AAAA;;;;;;;;;;sEDpCJV,e,EAAe;cAN3B,uDAM2B;eANjB;AACTzB,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD,CAHF;AAITkC,uBAAa,EAAC,gEAAkBC;AAJvB,S;AAMiB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEd5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKI;;AACE;;AACE;;AAAI;;AAA8B;;AACpC;;AACF;;;;;;AAQM;;AAAkD;;AAAgB;;;;;;AAClE;;AAA2F;;AAAoB;;;;;;AAFjH;;AACE;;AACA;;AACF;;;;;;AAFO;;AAAA;;AACA;;AAAA;;;;;;;;;;QDRFC,kB;;;AAKX,kCACUlC,WADV,EAC4CpE,MAD5C,EACoEF,WADpE,EACsGmF,KADtG,EAC2H;AAAA;;AAAjH,aAAAb,WAAA,GAAAA,WAAA;AAAkC,aAAApE,MAAA,GAAAA,MAAA;AAAwB,aAAAF,WAAA,GAAAA,WAAA;AAAkC,aAAAmF,KAAA,GAAAA,KAAA;AAJtG,aAAAZ,WAAA,GAAgB,KAAhB;AACA,aAAAkC,cAAA,GAA0B,KAA1B;AAII,aAAKC,SAAL,GAAiB,KAAKvB,KAAL,CAAWG,QAAX,CAAoBC,MAApB,CAA2BC,GAA5C;AAAiD/C,eAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,KAAKgE,SAA9C;AAAyD;;;;mCAEtG;AACN,eAAKC,OAAL,GAAiB,KAAK3G,WAAL,CAAiBuB,KAAjB,CAAuB;AACtCqF,mBAAO,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWnF,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB,EAA+C,0DAAWkD,SAAX,CAAqB,CAArB,CAA/C,CAAL;AAD6B,WAAvB,CAAjB;AAGD;;;oCAIQ;AAAA;;AACP,eAAKL,WAAL,GAAmB,IAAnB;;AACA,cAAG,KAAKoC,OAAL,CAAa/C,OAAhB,EAAwB;AACtB;AACD;;AACD,cAAG,CAAC,KAAK8C,SAAT,EAAoB;AACpB,eAAKpC,WAAL,CAAiBuC,SAAjB,CAA2B,KAAKF,OAAL,CAAahE,KAAxC,EAA+C,KAAK+D,SAApD,EAA+D7D,SAA/D,CAAyE,UAAAiC,GAAG,EAAG;AAC7ErC,mBAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCoC,GAAxC;;AACA,gBAAGA,GAAG,CAACsB,MAAJ,KAAe,QAAlB,EAA4B;AAC1B,oBAAI,CAAClG,MAAL,CAAYsD,aAAZ,CAA0B,eAA1B;AACD;AACF,WALD;AAMD;;;4BAdkB;AAAE,iBAAO,KAAKmD,OAAL,CAAa1C,QAApB;AAA+B;;;;;;;uBAfzCuC,kB,EAAkB,mI,EAAA,uH,EAAA,2H,EAAA,+H;AAAA,K;;;YAAlBA,kB;AAAkB,qC;AAAA,e;AAAA,a;AAAA,yc;AAAA;AAAA;ACV/B;;AACE;;AACE;;AACE;;AACF;;AACA;;AAKA;;AACE;;AAAyB;;AAAmC;;AAC5D;;AAAoD;AAAA,mBAAY,IAAAK,SAAA,EAAZ;AAAuB,WAAvB;;AAClD;;AACE;;AACF;;AACA;;AAIA;;AACE;;AACF;;AACF;;AACF;;AACF;;AACF;;;;AArBkB;;AAAA;;AAON;;AAAA;;AACD;;AAAA;;AAGE;;AAAA;;;;;;;;;sEDNAL,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTtC,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKoB,Q","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {SignInComponent} from \"./sign-in/sign-in.component\";\r\nimport {SignUpComponent} from \"./sign-up/sign-up.component\";\r\nimport {SignInPatientComponent} from \"./sign-in-patient/sign-in-patient.component\";\r\nimport {SignInSuperComponent} from \"./sign-in-super/sign-in-super.component\";\r\nimport {SmsVerifyComponent} from \"./sms-verify/sms-verify.component\";\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SignInSuperComponent\r\n  },\r\n\r\n  {\r\n    path: 'verify-email/:url',\r\n    component: SignInComponent\r\n  },\r\n\r\n  {\r\n    path: 'verify-sms/:url',\r\n    component: SmsVerifyComponent\r\n  },\r\n\r\n  {\r\n    path: 'sign-up/admin',\r\n    component: SignUpComponent\r\n  },\r\n\r\n  {\r\n    path: 'sign-up/provider',\r\n    component: SignUpComponent\r\n  },\r\n\r\n  {\r\n    path: 'sign-in',\r\n    component: SignInComponent\r\n  },\r\n\r\n  {\r\n    path: 'sign-in-patient',\r\n    component: SignInPatientComponent\r\n  },\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Ng2TelInputModule } from \"ng2-tel-input\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { SignInComponent } from './sign-in/sign-in.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\nimport { SignInPatientComponent } from './sign-in-patient/sign-in-patient.component';\r\nimport { SignInSuperComponent } from './sign-in-super/sign-in-super.component';\r\nimport { SmsVerifyComponent } from './sms-verify/sms-verify.component';\r\nimport { MatInputModule } from \"@angular/material\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [SignInComponent, SignUpComponent, SignInPatientComponent, SignInSuperComponent, SmsVerifyComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AuthRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    Ng2TelInputModule\r\n  ]\r\n})\r\nexport class AuthModule { }\r\n","import { Patient } from './../../../_model/user';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { ProviderService } from \"../../../_services/provider.service\";\r\nimport { AuthPatientService } from '../../../_services/auth.patient.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-sign-in-patient',\r\n  templateUrl: './sign-in-patient.component.html',\r\n  styleUrls: ['./sign-in-patient.component.css']\r\n})\r\nexport class SignInPatientComponent implements OnInit {\r\n  step = 1;\r\n  roomForm: FormGroup;\r\n  enterForm: FormGroup;\r\n  joinForm: FormGroup;\r\n  submitted = false;\r\n  entered=false;\r\n  domain = environment.domain;\r\n  providerData: any;\r\n  isInvalidDomain: boolean = false;\r\n  isValidRoom: boolean = true;\r\n  verifyKey=false;\r\n  roomName;\r\n  dniPatient;\r\n  patientData:any;\r\n\r\n  isDuplicatedEmail: boolean = false;\r\n  isEmptyPhoneNumber: boolean = false;\r\n  isDuplicatedPhone: boolean = false;\r\n  isValidNumber: boolean = true;\r\n  isDuplicatedDNI: boolean = false;\r\n  directRoomUrl: string = '';\r\n  private phoneNumber: any;\r\n\r\n  identify_patient = 'OK';\r\n  no_identify_patient = 'NOK';\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private authPatientService: AuthPatientService,\r\n    private router: Router,\r\n    private providerService: ProviderService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initData();\r\n  }\r\n\r\n  initData() {\r\n    localStorage.removeItem('step_attetion');\r\n    localStorage.removeItem('patient_auth');\r\n    localStorage.removeItem('patient');\r\n    localStorage.removeItem('provider');\r\n    localStorage.removeItem('patient_dni');\r\n    this.roomForm = this.formBuilder.group({\r\n      room: ['', [Validators.required, Validators.minLength(this.domain.length + 1)]],\r\n      dni: ['', Validators.required],\r\n      reason: ['', [Validators.required, Validators.minLength(1)]],\r\n      typeAttetion: ['', Validators.required]\r\n    });\r\n\r\n    this.f.dni.setValue(\"12312323\");\r\n    this.f.room.setValue(this.domain + \"testroom2\");\r\n    // this.f.room.setValue(this.domain);\r\n\r\n    this.joinForm = this.formBuilder.group({\r\n      fullName: ['', Validators.required],\r\n      dni: ['', Validators.required],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      phoneNumber: ['', Validators.required],\r\n      acceptTerms: [false, Validators.requiredTrue],\r\n      //providerId: ['', Validators.required],\r\n      room: ['', Validators.required],\r\n      reason: ['', [Validators.required, Validators.minLength(1)]],\r\n      typeAttetion: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  get f() { return this.roomForm.controls; }\r\n  get f1() { return this.joinForm.controls; }\r\n\r\n  checkRoom() {\r\n    localStorage.setItem('patient_auth', this.no_identify_patient);\r\n    if (this.roomForm.valid) {\r\n      console.log(\"this.roomForm.value\");\r\n      console.log(this.roomForm.value);\r\n      this.authPatientService.joinValidatePatient(this.roomForm.value).subscribe((resultPatient) => {\r\n        this.submitted = true;\r\n        const room = this.f.room.value.substring(this.domain.length);\r\n        const dniPatient = this.f.dni.value;\r\n        this.providerService.checkRoomExist(room)\r\n          .subscribe(result => {\r\n            if (result) {\r\n              this.step = 2;\r\n              this.submitted = false;\r\n              this.patientData = resultPatient.patient;\r\n              this.providerData = result;\r\n              this.directRoomUrl = '/' + this.providerData.room;\r\n              localStorage.setItem('patient', JSON.stringify(this.patientData));\r\n              localStorage.setItem('provider', JSON.stringify(this.providerData));\r\n              localStorage.setItem('patient_auth', this.identify_patient);\r\n              this.router.navigateByUrl(this.directRoomUrl);\r\n            }\r\n            else {\r\n              this.isValidRoom = false;\r\n            }\r\n          });\r\n      }, error => {\r\n        this.step = 2;\r\n        this.f1.room.setValue(this.f.room.value);\r\n        this.f1.dni.setValue(this.f.dni.value);\r\n        this.f1.reason.setValue(this.f.reason.value);\r\n        this.f1.typeAttetion.setValue(this.f.typeAttetion.value);\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  hasError(event: boolean) {\r\n    this.isValidNumber = event;\r\n  }\r\n\r\n  getNumber(phoneNumber: any) {\r\n    this.phoneNumber = phoneNumber;\r\n    return this.phoneNumber;\r\n  }\r\n\r\n  join() {\r\n    localStorage.setItem('patient_auth', this.no_identify_patient);\r\n    this.submitted = true;\r\n    if (this.joinForm.invalid) {\r\n      return;\r\n    }\r\n    this.joinForm.value.phoneNumber = this.phoneNumber;\r\n    this.authPatientService.join(this.joinForm.value)\r\n      .subscribe(result => {\r\n        if (result) {\r\n          this.authPatientService.joinValidatePatient(result).subscribe(resultPatient => {\r\n            const room = this.f1.room.value.substring(this.domain.length);\r\n            this.providerService.checkRoomExist(room)\r\n              .subscribe(result => {\r\n                this.providerData = result;\r\n                this.directRoomUrl = '/' + this.providerData.room;\r\n                this.patientData = resultPatient.patient;\r\n                localStorage.setItem('patient', JSON.stringify(this.patientData));\r\n                localStorage.setItem('provider', JSON.stringify(this.providerData));\r\n                localStorage.setItem('patient_auth', this.identify_patient);\r\n                this.router.navigateByUrl(this.directRoomUrl);\r\n                this.step = 1\r\n                this.providerData = null;\r\n                this.directRoomUrl = null;\r\n              });\r\n          });\r\n        }\r\n      }, error => {\r\n        if (error) {\r\n          if (error.error) error.error.errors[0].field === \"dni\" ? this.isDuplicatedDNI = true : (error.error.errors[0].field === 'phoneNumber' ? this.isDuplicatedPhone = true : this.isDuplicatedEmail = true);\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n  onReset() {\r\n    this.submitted = false;\r\n    this.isDuplicatedEmail = false;\r\n    this.isDuplicatedPhone = false;\r\n    this.isDuplicatedDNI = false;\r\n    this.isValidNumber = true;\r\n    this.isEmptyPhoneNumber = false;\r\n    this.joinForm.reset();\r\n  }\r\n}\r\n","<div class=\"patient\">\r\n  <div class=\"container-fluid min-vh-100 justify-content-center align-items-center\" style=\"width:40%\">\r\n    <ng-container *ngIf=\"step === 1\">\r\n\r\n      <div class=\"vh-100 justify-content-center align-items-center\">\r\n        <div class=\"card bg-dark\">\r\n          <div class=\"card-title text-center mt-5\">\r\n            Please provide us your information\r\n          </div>\r\n          <div class=\"card-body text-white\">\r\n            <form *ngIf=\"!verifyKey\" [formGroup]=\"roomForm\" (ngSubmit)=\"checkRoom()\">\r\n              <div>\r\n                <div class=\"form-group\">\r\n                  <label>DNI</label>\r\n                  <input type=\"text\" formControlName=\"dni\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f.dni.errors }\" />\r\n                  <div *ngIf=\"submitted && f.dni.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.dni.errors.required\">DNI is required</div>\r\n                    <div *ngIf=\"f.dni.errors.pattern\">DNI is a number</div>\r\n                    <div *ngIf=\"f.dni.errors.minlength\">DNI must be longer than 8 characters.</div>\r\n                  </div>\r\n                  <div class=\"d-block invalid-feedback\">\r\n                    <div *ngIf=\"isDuplicatedDNI\">DNI is already in use.</div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group col\">\r\n                  <label>Please input room name</label>\r\n                  <input matInput class=\"form-control\" formControlName=\"room\" type=\"text\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f.room.errors }\">\r\n                  <div *ngIf=\"submitted&&f.room.errors\" class=\"invalid-feedback d-block font-20\">\r\n                    <div *ngIf=\"f.room.errors.minlength\">\r\n                      Please type the url of doctor room\r\n                    </div>\r\n                    <div *ngIf=\"f.room.errors.required\">\r\n                      This field is required\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"isInvalidDomain\" class=\"invalid-feedback d-block font-20\">\r\n                    Please input valid domain\r\n                  </div>\r\n                  <div *ngIf=\"!isValidRoom\" class=\"invalid-feedback d-block font-20\">\r\n                    No available Room Name\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-row \">\r\n                <div class=\"form-group col\">\r\n                  <label>Reason</label>\r\n                  <textarea type=\"text\" formControlName=\"reason\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f.reason.errors }\">\r\n                    </textarea>\r\n                  <div *ngIf=\"submitted && f.reason.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.reason.errors.required\">Reason is required</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-row \">\r\n                <div class=\"form-group col\">\r\n                  <label>Type Attetion</label>\r\n                  <div>\r\n                    <input formControlName=\"typeAttetion\" type=\"radio\" name=\"typeAttetion\" value=1>New Consult<br>\r\n                    <input formControlName=\"typeAttetion\" type=\"radio\" name=\"typeAttetion\" value=2>Following<br></div>\r\n                  <div *ngIf=\"submitted && f.typeAttetion.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.typeAttetion.errors.required\">Type Attetion is required</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"text-center\">\r\n                <button type=\"submit\" style=\"bottom: 0;\" class=\" mb-3 text-white font-bold color-check-in\">Verify\r\n                </button>\r\n              </div>\r\n            </form>\r\n\r\n\r\n\r\n            <form *ngIf=\"verifyKey\" [formGroup]=\"enterForm\" (ngSubmit)=\"enterRoom()\">\r\n              <div>\r\n                <div class=\"form-group col\">\r\n                  <label>DNI</label>\r\n                  <input type=\"text\" formControlName=\"dni\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f2.dni.errors }\" />\r\n                  <div *ngIf=\"submitted && f2.dni.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f2.dni.errors.required\">DNI is required</div>\r\n                    <div *ngIf=\"f2.dni.errors.pattern\">DNI is a number</div>\r\n                    <div *ngIf=\"f2.dni.errors.minlength\">DNI must be longer than 8 characters.</div>\r\n                  </div>\r\n                  <div class=\"d-block invalid-feedback\">\r\n                    <div *ngIf=\"isDuplicatedDNI\">DNI is already in use.</div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group col\">\r\n                  <label>Please input room name</label>\r\n                  <input matInput class=\"form-control\" formControlName=\"room\" type=\"text\" value=\"http://localhost:4200/\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f2.room.errors }\">\r\n                  <div *ngIf=\"submitted&&f2.room.errors\" class=\"invalid-feedback d-block font-20\">\r\n                    <div *ngIf=\"f2.room.errors.minlength\">\r\n                      Please type the url of doctor room\r\n                    </div>\r\n                    <div *ngIf=\"f2.room.errors.required\">\r\n                      This field is required\r\n                    </div>\r\n                  </div>\r\n                  <div *ngIf=\"isInvalidDomain\" class=\"invalid-feedback d-block font-20\">\r\n                    Please input valid domain\r\n                  </div>\r\n                  <div *ngIf=\"!isValidRoom\" class=\"invalid-feedback d-block font-20\">\r\n                    No available Room Name\r\n                  </div>\r\n\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <div>\r\n                    <input id=\"male\" type=\"radio\" value=\"newConsult\" name=\"gender\" formControlName=\"gender\">\r\n                    <label for=\"male\">New Consult</label>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <input id=\"female\" type=\"radio\" value=\"followUp\" name=\"gender\" formControlName=\"gender\">\r\n                    <label for=\"female\">Follow Up</label>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                  <textarea class=\"form-control\" formControlName=\"reason\"\r\n                    placeholder=\"Reason For Medical Attention\"></textarea>\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                Validate or modify your information\r\n              </div>\r\n              <div class=\"row mb-2\">\r\n                <div class=\"col-6\">\r\n                  <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': entered && f2.firstName.errors }\" placeholder=\"FirstName\" />\r\n                </div>\r\n                <div *ngIf=\"entered && f2.dni.errors\" class=\"invalid-feedback\">\r\n                  <div *ngIf=\"f2.dni.errors.required\">DNI is required</div>\r\n                </div>\r\n                <div class=\"col-6\">\r\n                  <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': entered && f2.lastName.errors }\" placeholder=\"LastName\" />\r\n                </div>\r\n              </div>\r\n              <div class=\"row mb-2\">\r\n                <div class=\"col-6\">\r\n                  <input type=\"email\" formControlName=\"email\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': entered && f2.email.errors }\" placeholder=\"Email Address\" />\r\n                </div>\r\n                <div class=\"col-6\">\r\n                  <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': entered && f2.phoneNumber.errors }\" placeholder=\"Phone Number\" />\r\n                </div>\r\n              </div>\r\n              <div class=\"text-center\">\r\n                <button type=\"submit\" style=\"bottom: 0;\" class=\" mb-3 text-white font-bold color-check-in\">\r\n                  Enter Room\r\n                </button>\r\n              </div>\r\n\r\n\r\n            </form>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"step === 2\">\r\n      <div class=\"vh-100 d-flex justify-content-center align-items-center\">\r\n        <div class=\"card bg-dark\">\r\n          <div class=\"card-title text-center mt-5\">\r\n            Please provide us your information\r\n          </div>\r\n          <div class=\"card-body text-white\">\r\n            <form [formGroup]=\"joinForm\" (ngSubmit)=\"join()\">\r\n              <div class=\"form-row \">\r\n                <div class=\"form-group col\">\r\n                  <label>Full Name</label>\r\n                  <input type=\"text\" formControlName=\"fullName\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f1.fullName.errors }\" />\r\n                  <div *ngIf=\"submitted && f1.fullName.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f1.fullName.errors.required\">Full Name is required</div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"form-group col\">\r\n                  <label>DNI</label>\r\n                  <input type=\"text\" formControlName=\"dni\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f1.dni.errors }\" />\r\n                  <div *ngIf=\"submitted && f1.dni.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f1.dni.errors.required\">DNI is required</div>\r\n                  </div>\r\n                  <div class=\"d-block invalid-feedback\">\r\n                    <div *ngIf=\"isDuplicatedDNI\">DNI is already in use.</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row\">\r\n                <div class=\"form-group col\">\r\n                  <label>Email</label>\r\n                  <input type=\"email\" formControlName=\"email\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f1.email.errors }\" />\r\n                  <div *ngIf=\"submitted && f1.email.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f1.email.errors.required\">Email address is required</div>\r\n                    <div *ngIf=\"f1.email.errors.email\">Email address is invalid</div>\r\n                  </div>\r\n                  <div class=\"invalid-feedback d-block\" *ngIf=\"isDuplicatedEmail\">Email is already in use</div>\r\n                </div>\r\n                <div class=\"form-group col text-black-50\">\r\n                  <label class=\"text-white\">Phone Number</label>\r\n                  <input type=\"text\" ng2TelInput formControlName=\"phoneNumber\" class=\"form-control  text-black-50\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f1.phoneNumber.errors }\" (hasError)=\"hasError($event)\"\r\n                    (ng2TelOutput)=\"getNumber($event)\" />\r\n                  <div class=\"invalid-feedback d-block\" *ngIf=\"isEmptyPhoneNumber\">Phone Number is required</div>\r\n                  <div class=\"invalid-feedback d-block\" *ngIf=\"isDuplicatedPhone\">Phone Number is already in use</div>\r\n                  <div class=\"invalid-feedback d-block\" *ngIf=\"!isValidNumber\">Please type valid number</div>\r\n                </div>\r\n              </div>\r\n\r\n              <!--Hidden field\r\n              <input type=\"hidden\" formControlName=\"providerId\">-->\r\n              \r\n              <div class=\"form-group col\">\r\n                <label>Please input room name</label>\r\n                <input matInput class=\"form-control\" formControlName=\"room\" type=\"text\"\r\n                  [ngClass]=\"{ 'is-invalid': submitted && f1.room.errors }\">\r\n                <div *ngIf=\"submitted&&f.room.errors\" class=\"invalid-feedback d-block font-20\">\r\n                  <div *ngIf=\"f1.room.errors.minlength\">\r\n                    Please type the url of doctor room\r\n                  </div>\r\n                  <div *ngIf=\"f1.room.errors.required\">\r\n                    This field is required\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"isInvalidDomain\" class=\"invalid-feedback d-block font-20\">\r\n                  Please input valid domain\r\n                </div>\r\n                <div *ngIf=\"!isValidRoom\" class=\"invalid-feedback d-block font-20\">\r\n                  No available Room Name\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-row \">\r\n                <div class=\"form-group col\">\r\n                  <label>Reason</label>\r\n                  <textarea type=\"text\" formControlName=\"reason\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f1.reason.errors }\">\r\n                    </textarea>\r\n                  <div *ngIf=\"submitted && f.reason.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f1.reason.errors.required\">Reason is required</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-row \">\r\n                <div class=\"form-group col\">\r\n                  <label>Type Attetion</label>\r\n                  <div>\r\n                    <input formControlName=\"typeAttetion\" type=\"radio\" name=\"typeAttetion\" value=1>New Consult<br>\r\n                    <input formControlName=\"typeAttetion\" type=\"radio\" name=\"typeAttetion\" value=2>Following<br></div>\r\n                  <div *ngIf=\"submitted && f1.typeAttetion.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f1.typeAttetion.errors.required\">Type Attetion is required</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group form-check mt-3\">\r\n                <input type=\"checkbox\" formControlName=\"acceptTerms\" id=\"acceptTerms\" class=\"form-check-input cursor\"\r\n                  [ngClass]=\"{ 'is-invalid': submitted && f1.acceptTerms.errors }\" />\r\n                <label for=\"acceptTerms\" class=\"form-check-label\">Accept Terms & Conditions</label>\r\n                <div *ngIf=\"submitted && f1.acceptTerms.errors\" class=\"invalid-feedback\">Accept Ts & Cs is required\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"text-center\">\r\n                <button class=\"btn btn-primary mr-1\">Join</button>\r\n                <button class=\"btn btn-secondary ml-3\" type=\"reset\" (click)=\"onReset()\">Cancel</button>\r\n                <a class=\"ml-3\" routerLink=\"/\"> <i class=\"fa fa-arrow-circle-o-left\"></i> Go home</a>\r\n                <a class=\"ml-3 text-white-50\" routerLink=\"{{directRoomUrl}}\"> <i\r\n                    class=\"fa fa-arrow-circle-o-right\"></i>Already\r\n                  had account ?</a>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport {AuthService} from \"../../../_services/auth.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport {error} from \"selenium-webdriver\";\r\n\r\n@Component({\r\n  selector: 'app-sign-in-super',\r\n  templateUrl: './sign-in-super.component.html',\r\n  styleUrls: ['./sign-in-super.component.css']\r\n})\r\nexport class SignInSuperComponent implements OnInit {\r\n\r\n  authForm: FormGroup;\r\n  isSubmitted  =  false;\r\n  isLoginFailed: boolean = false;\r\n  hasNotPermission: boolean = false;\r\n  constructor(\r\n    private authService: AuthService, private router: Router, private formBuilder: FormBuilder\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.authForm  =  this.formBuilder.group({\r\n      email: ['', Validators.required],\r\n      password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(100)]]\r\n    });\r\n  }\r\n\r\n  get formControls() { return this.authForm.controls; }\r\n\r\n  signIn(){\r\n    this.isSubmitted = true;\r\n    if(this.authForm.invalid){\r\n      return;\r\n    }\r\n    this.authService.signIn(this.authForm.value).subscribe((res: any)=> {\r\n      if(res.token) {\r\n        if(res.user.role === \"SuperAdmin\") {\r\n          this.router.navigateByUrl('/dashboard/super');\r\n        } else {\r\n          this.hasNotPermission = true;\r\n          this.router.navigateByUrl('/super')\r\n        }\r\n      }\r\n    }, error => {\r\n      this.isLoginFailed = true;\r\n      this.router.navigateByUrl('/super')\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"vh-100  d-flex justify-content-center align-items-center\">\r\n  <div>\r\n    <h1 style=\"text-align:center\">\r\n      Welcome back, Admin\r\n    </h1>\r\n    <ng-container *ngIf=\"isLoginFailed\">\r\n      <div  class=\"text-center text-danger\" >\r\n        <h4>Login failed. Email or Password is invalid</h4>\r\n      </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"hasNotPermission\">\r\n      <div  class=\"text-center text-danger\" >\r\n        <h4>Only Super Admin can access to this page.</h4>\r\n      </div>\r\n    </ng-container>\r\n    <div class=\"login\">\r\n      <h2 class=\"login-header\">Log in</h2>\r\n      <form [formGroup]=\"authForm\" class=\"login-container\" (ngSubmit)=\"signIn()\"> <p [ngClass]=\"{ 'has-error': isSubmitted && formControls.email.errors }\">\r\n        <input type=\"email\" placeholder=\"Email\" formControlName=\"email\">\r\n      </p> <div *ngIf=\"isSubmitted && formControls.email.errors\" class=\"help-block\">\r\n        <div *ngIf=\"formControls.email.errors.required\">Email is required</div>\r\n        <div *ngIf=\"formControls.email.errors.email\">Please type valid email</div>\r\n      </div> <p [ngClass]=\"{ 'has-error': isSubmitted && formControls.password.errors }\">\r\n        <input type=\"password\" placeholder=\"Password\" formControlName=\"password\">\r\n      </p> <div *ngIf=\"isSubmitted && formControls.password.errors\" class=\"help-block\">\r\n        <div *ngIf=\"formControls.password.errors.required\">Password is required</div>\r\n        <div *ngIf=\"formControls.password.errors.minlength\">Password must be over than 8 letters</div>\r\n        <div *ngIf=\"formControls.password.errors.maxlength\">Password must be less than 100 letters</div>\r\n      </div> <p>\r\n        <input type=\"submit\" value=\"Log in\">\r\n      </p>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {AuthService} from \"../../../_services/auth.service\";\r\nimport {ActivatedRoute,  Router} from \"@angular/router\";\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-sign-in',\r\n  templateUrl: './sign-in.component.html',\r\n  styleUrls: ['./sign-in.component.css']\r\n})\r\nexport class SignInComponent implements OnInit {\r\n  authForm: FormGroup;\r\n  isSubmitted  =  false;\r\n  isLoginFailed: boolean = false;\r\n  isApproved: boolean = true;\r\n  isActive: boolean = true;\r\n  constructor(private authService: AuthService, private route: ActivatedRoute, private router: Router, private formBuilder: FormBuilder) {\r\n    this.authForm  =  this.formBuilder.group({\r\n      email: ['', Validators.required],\r\n      password: ['', [Validators.required, Validators.maxLength(100)]]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //When user approved, verify his email.\r\n    const token: string = this.route.snapshot.params.url;\r\n    if(token) {\r\n      this.authService.emailVerify(token).subscribe(res=> {\r\n        console.log(\"email verify success\", res);\r\n        this.router.navigateByUrl('/auth/sign-in');\r\n      });\r\n    }\r\n  }\r\n\r\n  get formControls() { return this.authForm.controls; }\r\n\r\n  signIn(){\r\n    this.isSubmitted = true;\r\n    if(this.authForm.invalid){\r\n      return;\r\n    }\r\n     this.authService.signIn(this.authForm.value).subscribe( res => {\r\n       console.log('res')\r\n       console.log(res)\r\n       if(res.user.role==='User'){\r\n        this.router.navigateByUrl('/dashboard/health-provider')\r\n       }else if(res.user.role==='Analysis'){\r\n        this.router.navigateByUrl('/dashboard/analysis')\r\n       }else if(res.user.role==='SuperAdmin'){\r\n        this.router.navigateByUrl('/dashboard/administrators')\r\n       }\r\n    }, error => {\r\n      this.isLoginFailed = !!error;\r\n     }\r\n   );\r\n  }\r\n\r\n  gotoRegister(){\r\n    this.router.navigateByUrl('/auth/sign-up/provider')\r\n  }\r\n\r\n  allowLogin(res) {\r\n    if (res.user.role === \"Admin\") {\r\n      this.router.navigateByUrl('/dashboard/admin')\r\n    } else {\r\n      this.router.navigateByUrl('/dashboard/health-provider')\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"vh-100  d-flex justify-content-center align-items-center\">\r\n  <div>\r\n    <h1 style=\"text-align:center\">\r\n      Welcome\r\n    </h1>\r\n    <ng-container *ngIf=\"isLoginFailed\">\r\n      <div  class=\"text-center text-danger\" >\r\n        <h4>Login failed. Email or Password is invalid</h4>\r\n      </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!isActive\">\r\n      <div  class=\"text-center text-danger\" >\r\n        <h6>Your account is inactive</h6>\r\n      </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!isApproved\">\r\n      <div  class=\"text-center text-danger\" >\r\n        <h6>Your account is not approved</h6>\r\n      </div>\r\n    </ng-container>\r\n    <div class=\"login\">\r\n      <h2 class=\"login-header\">Log in</h2>\r\n      <form [formGroup]=\"authForm\" class=\"login-container\" (ngSubmit)=\"signIn()\"> <p [ngClass]=\"{ 'has-error': isSubmitted && formControls.email.errors }\">\r\n        <input type=\"email\" placeholder=\"Email\" formControlName=\"email\">\r\n      </p> <div *ngIf=\"isSubmitted && formControls.email.errors\" class=\"help-block\">\r\n        <div *ngIf=\"formControls.email.errors.required\">Email is required</div>\r\n        <div *ngIf=\"formControls.email.errors.email\">Please type valid email</div>\r\n      </div> \r\n      <p [ngClass]=\"{ 'has-error': isSubmitted && formControls.password.errors }\">\r\n        <input type=\"password\" placeholder=\"Password\" formControlName=\"password\">\r\n      </p> \r\n      <div *ngIf=\"isSubmitted && formControls.password.errors\" class=\"help-block\">\r\n        <div *ngIf=\"formControls.password.errors.required\">Password is required</div>\r\n        <div *ngIf=\"formControls.password.errors.maxlength\">Password must be less than 100 letters</div>\r\n      </div> \r\n      <div class=\"row\">\r\n        <div class=\"col-6\">\r\n          <button class=\"btn btn-primary\" type=\"submit\" style=\"float:left;\">Log in</button>\r\n\r\n        </div>\r\n        <div class=\"col-6\">\r\n          <button class=\"btn btn-warning\" style=\"float:right;\" (click)=\"gotoRegister()\">Register</button>\r\n\r\n        </div>\r\n      </div>\r\n      </form>\r\n      \r\n    </div>\r\n  </div>\r\n</div>\r\n","import { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\r\nimport {Component, OnInit, ViewEncapsulation} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport { Router } from '@angular/router';\r\n\r\nimport {MustMatch} from \"../../../_helpers/must-match.validator\";\r\nimport {AuthService} from \"../../../_services/auth.service\";\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.css'],\r\n  encapsulation:ViewEncapsulation.None\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\nduplicatedKey=false;\r\n\r\n  isDuplicatedRoom: boolean = false;\r\n  isPending: boolean = false;\r\n  isDuplicatedEmail:boolean = false;\r\n  isDuplicatedPhone: boolean = false;\r\n  isValidNumber: boolean = true;\r\n  isEmptyPhoneNumber: boolean = false;\r\n  phoneNumber:string = '';\r\nconstructor(\r\n  private formBuilder: FormBuilder, \r\n  private auth: AuthService,\r\n  private router:Router\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email,Validators.maxLength(100)]],\r\n      password: ['', Validators.required],\r\n      confirmPassword: ['', Validators.required],\r\n    }, {\r\n      validator: MustMatch('password', 'confirmPassword')\r\n    });\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.registerForm.controls; }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.auth.signUp(this.registerForm.value).subscribe(res=> {\r\n    if(res==='duplicate'){\r\n      this.duplicatedKey=true;\r\n    }\r\n      if(res.token) {\r\n        this.router.navigateByUrl('/dashboard/health-provider');\r\n      } else if(res.status == \"409\") {\r\n        console.log('sdfsdf')\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  hasError(event: boolean) {\r\n    this.isValidNumber = event;\r\n  }\r\n}\r\n","<div class=\"vh-100 d-flex justify-content-center align-items-center\">\r\n  <!-- main app container -->\r\n  <div class=\"card bg-dark\">\r\n    <div class=\"card-title text-center mt-5\">\r\n      <a class=\"navbar-brand\" href=\"index.html\">\r\n        <!-- Logo icon -->\r\n \r\n        <!-- Logo text -->\r\n        <span fxShow=\"false\" fxShow.gt-xs class=\"mx-3 text-white-50\">\r\n          PORTAL\r\n        </span>\r\n      </a>\r\n    </div>\r\n    <div class=\"card-body text-white\">\r\n      <ng-container *ngIf=\"duplicatedKey\">\r\n        <p class=\"mt-3 text-danger text-center\">\r\n          Duplicated Email.\r\n        </p>\r\n      </ng-container>\r\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n     \r\n        <div class=\"form-row\">\r\n          <div class=\"form-group col\">\r\n            <label>Email</label>\r\n            <input type=\"email\" formControlName=\"email\" class=\"form-control\"\r\n                   [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n            <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.email.errors.required\">Email address is required</div>\r\n              <div *ngIf=\"f.email.errors.email\">Email address is invalid</div>\r\n              <div *ngIf=\"f.email.errors.maxlength\">Email address must be less than 100 characters</div>\r\n            </div>\r\n            <div class=\"invalid-feedback d-block\" *ngIf=\"isDuplicatedEmail\">Email is already in use</div>\r\n          </div>\r\n      \r\n        </div>\r\n\r\n        <div class=\"form-row\">\r\n          <div class=\"form-group col\">\r\n            <label>Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\"\r\n                   [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\"/>\r\n            <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form-group col\">\r\n            <label>Confirm password</label>\r\n            <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\"/>\r\n            <div *ngIf=\"submitted && f.confirmPassword.errors\" class=\"invalid-feedback\">\r\n              <div *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</div>\r\n              <div *ngIf=\"f.confirmPassword.errors.mustMatch\">Confirm Password must match</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"text-center\">\r\n          <button class=\"btn btn-primary mr-1\">Register</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AuthService} from \"../../../_services/auth.service\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-sms-verify',\r\n  templateUrl: './sms-verify.component.html',\r\n  styleUrls: ['./sms-verify.component.css']\r\n})\r\nexport class SmsVerifyComponent implements OnInit {\r\n  smsForm: FormGroup;\r\n  isSubmitted  =  false;\r\n  isVerifyFailed: boolean = false;\r\n  fakeToken: string;\r\n  constructor(\r\n    private authService: AuthService, private router: Router, private formBuilder: FormBuilder, private route: ActivatedRoute\r\n  ) { this.fakeToken = this.route.snapshot.params.url; console.log(\"snap shot for fake number\", this.fakeToken)}\r\n\r\n  ngOnInit(): void {\r\n    this.smsForm  =  this.formBuilder.group({\r\n      smsCode: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(6)]],\r\n    });\r\n  }\r\n\r\n  get formControls() { return this.smsForm.controls; }\r\n\r\n  smsVerify(){\r\n    this.isSubmitted = true;\r\n    if(this.smsForm.invalid){\r\n      return;\r\n    }\r\n    if(!this.fakeToken) return;\r\n    this.authService.smsVerify(this.smsForm.value, this.fakeToken).subscribe(res=> {\r\n      console.log(\"verification success sms\", res);\r\n      if(res.status === \"active\") {\r\n        this.router.navigateByUrl('/auth/sign-in');\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"vh-100  d-flex justify-content-center align-items-center\">\r\n  <div>\r\n    <h1 style=\"text-align:center\">\r\n      Welcome\r\n    </h1>\r\n    <ng-container *ngIf=\"isVerifyFailed\">\r\n      <div class=\"text-center text-danger\">\r\n        <h4>Verify failed. code is invalid</h4>\r\n      </div>\r\n    </ng-container>\r\n    <div class=\"login\">\r\n      <h4 class=\"login-header\">Please Enter your verification code</h4>\r\n      <form [formGroup]=\"smsForm\" class=\"login-container\" (ngSubmit)=\"smsVerify()\">\r\n        <p [ngClass]=\"{ 'has-error': isSubmitted && formControls.smsCode.errors }\">\r\n          <input type=\"number\" placeholder=\"Verification code\" formControlName=\"smsCode\">\r\n        </p>\r\n        <div *ngIf=\"isSubmitted && formControls.smsCode.errors\" class=\"help-block\">\r\n          <div *ngIf=\"formControls.smsCode.errors.required\">Code is required</div>\r\n          <div *ngIf=\"formControls.smsCode.errors.minlength || formControls.smsCode.error.maxlength\">Please type 6 digits</div>\r\n        </div>\r\n        <p>\r\n          <input type=\"submit\" value=\"Verify with code\">\r\n        </p>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]}