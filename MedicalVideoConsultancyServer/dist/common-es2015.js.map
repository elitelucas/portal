{"version":3,"sources":["./node_modules/ng2-tel-input/__ivy_ngcc__/esm2015/ng2-tel-input.js","./src/app/_helpers/must-match.validator.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { EventEmitter, Directive, ElementRef, Inject, PLATFORM_ID, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/ng2-tel-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nconst defaultUtilScript = 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/16.0.1/js/utils.js';\nclass Ng2TelInput {\n    /**\n     * @param {?} el\n     * @param {?} platformId\n     */\n    constructor(el, platformId) {\n        this.el = el;\n        this.platformId = platformId;\n        this.ng2TelInputOptions = {};\n        this.hasError = new EventEmitter();\n        this.ng2TelOutput = new EventEmitter();\n        this.countryChange = new EventEmitter();\n        this.intlTelInputObject = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.ng2TelInputOptions = Object.assign({}, this.ng2TelInputOptions, { utilsScript: this.getUtilsScript(this.ng2TelInputOptions) });\n            this.ngTelInput = window.intlTelInput(this.el.nativeElement, Object.assign({}, this.ng2TelInputOptions));\n            this.el.nativeElement.addEventListener(\"countrychange\", (/**\n             * @return {?}\n             */\n            () => {\n                this.countryChange.emit(this.ngTelInput.getSelectedCountryData());\n            }));\n            this.intlTelInputObject.emit(this.ngTelInput);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        /** @type {?} */\n        let isInputValid = this.isInputValid();\n        if (isInputValid) {\n            /** @type {?} */\n            let telOutput = this.ngTelInput.getNumber();\n            this.hasError.emit(isInputValid);\n            this.ng2TelOutput.emit(telOutput);\n        }\n        else {\n            this.hasError.emit(isInputValid);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    isInputValid() {\n        return this.ngTelInput.isValidNumber();\n    }\n    /**\n     * @param {?} country\n     * @return {?}\n     */\n    setCountry(country) {\n        this.ngTelInput.setCountry(country);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    getUtilsScript(options) {\n        return options.utilsScript || defaultUtilScript;\n    }\n}\nNg2TelInput.ɵfac = function Ng2TelInput_Factory(t) { return new (t || Ng2TelInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };\nNg2TelInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Ng2TelInput, selectors: [[\"\", \"ng2TelInput\", \"\"]], hostBindings: function Ng2TelInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function Ng2TelInput_blur_HostBindingHandler($event) { return ctx.onBlur(); });\n    } }, inputs: { ng2TelInputOptions: \"ng2TelInputOptions\" }, outputs: { hasError: \"hasError\", ng2TelOutput: \"ng2TelOutput\", countryChange: \"countryChange\", intlTelInputObject: \"intlTelInputObject\" } });\n/** @nocollapse */\nNg2TelInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nNg2TelInput.propDecorators = {\n    ng2TelInputOptions: [{ type: Input, args: ['ng2TelInputOptions',] }],\n    hasError: [{ type: Output, args: ['hasError',] }],\n    ng2TelOutput: [{ type: Output, args: ['ng2TelOutput',] }],\n    countryChange: [{ type: Output, args: ['countryChange',] }],\n    intlTelInputObject: [{ type: Output, args: ['intlTelInputObject',] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2TelInput, [{\n        type: Directive,\n        args: [{\n                selector: '[ng2TelInput]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, { ng2TelInputOptions: [{\n            type: Input,\n            args: ['ng2TelInputOptions']\n        }], hasError: [{\n            type: Output,\n            args: ['hasError']\n        }], ng2TelOutput: [{\n            type: Output,\n            args: ['ng2TelOutput']\n        }], countryChange: [{\n            type: Output,\n            args: ['countryChange']\n        }], intlTelInputObject: [{\n            type: Output,\n            args: ['intlTelInputObject']\n        }], onBlur: [{\n            type: HostListener,\n            args: ['blur']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/ng2-tel-input.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Ng2TelInputModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n        return {\n            ngModule: Ng2TelInputModule,\n            providers: []\n        };\n    }\n}\nNg2TelInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Ng2TelInputModule });\nNg2TelInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function Ng2TelInputModule_Factory(t) { return new (t || Ng2TelInputModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2TelInputModule, { declarations: [Ng2TelInput], exports: [Ng2TelInput] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2TelInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [Ng2TelInput],\n                exports: [Ng2TelInput]\n            }]\n    }], null, null); })();\n\nexport { Ng2TelInput, Ng2TelInputModule };\n\n//# sourceMappingURL=ng2-tel-input.js.map","import { FormGroup } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      // return if another validator has already found an error on the matchingControl\r\n      return;\r\n    }\r\n\r\n    // set error on matchingControl if validation fails\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}