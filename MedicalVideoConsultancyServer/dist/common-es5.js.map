{"version":3,"sources":["webpack:///node_modules/ng2-tel-input/__ivy_ngcc__/esm2015/ng2-tel-input.js","webpack:///src/app/_helpers/must-match.validator.ts"],"names":["defaultUtilScript","Ng2TelInput","el","platformId","ng2TelInputOptions","hasError","ng2TelOutput","countryChange","intlTelInputObject","Object","assign","utilsScript","getUtilsScript","ngTelInput","window","intlTelInput","nativeElement","addEventListener","emit","getSelectedCountryData","isInputValid","telOutput","getNumber","isValidNumber","country","setCountry","options","ɵfac","Ng2TelInput_Factory","t","ɵdir","type","selectors","hostBindings","Ng2TelInput_HostBindings","rf","ctx","Ng2TelInput_blur_HostBindingHandler","$event","onBlur","inputs","outputs","ctorParameters","String","decorators","args","propDecorators","selector","Ng2TelInputModule","ngModule","providers","ɵmod","ɵinj","factory","Ng2TelInputModule_Factory","ngJitMode","declarations","exports","MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","value","setErrors"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { EventEmitter, Directive, ElementRef, Inject, PLATFORM_ID, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/ng2-tel-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nconst defaultUtilScript = 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/16.0.1/js/utils.js';\nclass Ng2TelInput {\n    /**\n     * @param {?} el\n     * @param {?} platformId\n     */\n    constructor(el, platformId) {\n        this.el = el;\n        this.platformId = platformId;\n        this.ng2TelInputOptions = {};\n        this.hasError = new EventEmitter();\n        this.ng2TelOutput = new EventEmitter();\n        this.countryChange = new EventEmitter();\n        this.intlTelInputObject = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.ng2TelInputOptions = Object.assign({}, this.ng2TelInputOptions, { utilsScript: this.getUtilsScript(this.ng2TelInputOptions) });\n            this.ngTelInput = window.intlTelInput(this.el.nativeElement, Object.assign({}, this.ng2TelInputOptions));\n            this.el.nativeElement.addEventListener(\"countrychange\", (/**\n             * @return {?}\n             */\n            () => {\n                this.countryChange.emit(this.ngTelInput.getSelectedCountryData());\n            }));\n            this.intlTelInputObject.emit(this.ngTelInput);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        /** @type {?} */\n        let isInputValid = this.isInputValid();\n        if (isInputValid) {\n            /** @type {?} */\n            let telOutput = this.ngTelInput.getNumber();\n            this.hasError.emit(isInputValid);\n            this.ng2TelOutput.emit(telOutput);\n        }\n        else {\n            this.hasError.emit(isInputValid);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    isInputValid() {\n        return this.ngTelInput.isValidNumber();\n    }\n    /**\n     * @param {?} country\n     * @return {?}\n     */\n    setCountry(country) {\n        this.ngTelInput.setCountry(country);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    getUtilsScript(options) {\n        return options.utilsScript || defaultUtilScript;\n    }\n}\nNg2TelInput.ɵfac = function Ng2TelInput_Factory(t) { return new (t || Ng2TelInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };\nNg2TelInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Ng2TelInput, selectors: [[\"\", \"ng2TelInput\", \"\"]], hostBindings: function Ng2TelInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function Ng2TelInput_blur_HostBindingHandler($event) { return ctx.onBlur(); });\n    } }, inputs: { ng2TelInputOptions: \"ng2TelInputOptions\" }, outputs: { hasError: \"hasError\", ng2TelOutput: \"ng2TelOutput\", countryChange: \"countryChange\", intlTelInputObject: \"intlTelInputObject\" } });\n/** @nocollapse */\nNg2TelInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nNg2TelInput.propDecorators = {\n    ng2TelInputOptions: [{ type: Input, args: ['ng2TelInputOptions',] }],\n    hasError: [{ type: Output, args: ['hasError',] }],\n    ng2TelOutput: [{ type: Output, args: ['ng2TelOutput',] }],\n    countryChange: [{ type: Output, args: ['countryChange',] }],\n    intlTelInputObject: [{ type: Output, args: ['intlTelInputObject',] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2TelInput, [{\n        type: Directive,\n        args: [{\n                selector: '[ng2TelInput]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, { ng2TelInputOptions: [{\n            type: Input,\n            args: ['ng2TelInputOptions']\n        }], hasError: [{\n            type: Output,\n            args: ['hasError']\n        }], ng2TelOutput: [{\n            type: Output,\n            args: ['ng2TelOutput']\n        }], countryChange: [{\n            type: Output,\n            args: ['countryChange']\n        }], intlTelInputObject: [{\n            type: Output,\n            args: ['intlTelInputObject']\n        }], onBlur: [{\n            type: HostListener,\n            args: ['blur']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/ng2-tel-input.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Ng2TelInputModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n        return {\n            ngModule: Ng2TelInputModule,\n            providers: []\n        };\n    }\n}\nNg2TelInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Ng2TelInputModule });\nNg2TelInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function Ng2TelInputModule_Factory(t) { return new (t || Ng2TelInputModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2TelInputModule, { declarations: [Ng2TelInput], exports: [Ng2TelInput] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2TelInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [Ng2TelInput],\n                exports: [Ng2TelInput]\n            }]\n    }], null, null); })();\n\nexport { Ng2TelInput, Ng2TelInputModule };\n\n//# sourceMappingURL=ng2-tel-input.js.map","import { FormGroup } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      // return if another validator has already found an error on the matchingControl\r\n      return;\r\n    }\r\n\r\n    // set error on matchingControl if validation fails\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  }\r\n}\r\n"]}